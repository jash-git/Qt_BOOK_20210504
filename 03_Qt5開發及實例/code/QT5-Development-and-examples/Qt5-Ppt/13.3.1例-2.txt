#include <QtCore>
#include <QApplication>
#include <QTextCodec>
#include <QSqlDatabase>
#include <QMessageBox>
#include <QSqlQuery>
#include <QTime>
#include <QSqlError>
#include <QtDebug>
#include <QSqlDriver>
#include <QSqlRecord>
int main(int argc,char * argv[])
{
    QApplication app(argc,argv);			//创建一个Qt应用程序对象app
    QTextCodec::setCodecForTr(QTextCodec::codecForLocale());
											//设置中文显示
    QSqlDatabase db =QSqlDatabase::addDatabase("QSQLITE");	//(a)
    db.setHostName("easybook-3313b0");		//设置数据库主机名
    db.setDatabaseName("qtDB.db");							//(b)
    db.setUserName("zhouhejun");			//设置数据库用户名
    db.setPassword("123456");				//设置数据库密码
    db.open();								//打开连接
    //创建数据库表
    QSqlQuery query;										//(c)
    bool success=query.exec("create table automobile		//(d)
                        (id int primary key,
                        attribute varchar,
                        type varchar,
                        kind varchar,
                        nation int,
                        carnumber int,
                        elevaltor int,
                        distance int,
                        oil int,
                        temperature int)");
    if(success)
        qDebug()<<QObject::tr("数据库表创建成功！\n");
    else
        qDebug()<<QObject::tr("数据库表创建失败！\n");
    //查询
    query.exec("select * from automobil");
    QSqlRecord rec = query.record();
    qDebug() << QObject::tr("automobil表字段数：" )<< rec.count();
    //插入记录
    QTime t;
    t.start();			//启动一个计时器，统计操作耗时
    query.prepare("insert into automobil values(?,?,?,?,?,?,?,?,?,?)");
															//(e)
    long records=100;	//向表中插入任意的100条记录
    for(int i=0;i<records;i++)
    {
        query.bindValue(0,i);								//(f)
        query.bindValue(1,"四轮");
        query.bindValue(2,"轿车");
        query.bindValue(3,"富康");
        query.bindValue(4,rand()%100);
        query.bindValue(5,rand()%10000);
        query.bindValue(6,rand()%300);
        query.bindValue(7,rand()%200000);
        query.bindValue(8,rand()%52);
        query.bindValue(9,rand()%100);
        success=query.exec();								//(g)
        if(!success)
        {
          	QSqlError lastError=query.lastError();
          	qDebug()<<lastError.driverText()<<QString(QObject::tr("插入失败"));
        }
    }
    qDebug()<<QObject::tr("插入 %1 条记录，耗时：%2 ms").arg(records).arg (t.elapsed());													//(h)
    //排序
    t.restart();			//重启计时器
    success=query.exec("select * from automobil order by id desc");
															//(i)
    if(success)
        	qDebug()<<QObject::tr("排序%1条记录，耗时：%2 ms").arg(records).arg (t.elapsed());				//输出操作耗时
    else
        	qDebug()<<QObject::tr("排序失败！");
    //更新记录
    t.restart();			//重启计时器
    for(int i=0;i<records;i++)
    {
       	query.clear();
       	query.prepare(QString("update automobil set attribute=?,type=?,"
                             "kind=?,nation=?,"
                             "carnumber=?,elevaltor=?,"
                             "distance=?,oil=?,"
                             "temperature=? where id=%1").arg(i));
															//(j)
      	query.bindValue(0,"四轮");
       	query.bindValue(1,"轿车");
       	query.bindValue(2,"富康");
       	query.bindValue(3,rand()%100);
       	query.bindValue(4,rand()%10000);
       	query.bindValue(5,rand()%300);
       	query.bindValue(6,rand()%200000);
       	query.bindValue(7,rand()%52);
      	query.bindValue(8,rand()%100);
       	success=query.exec();
       	if(!success)
       	{
           	QSqlError lastError=query.lastError();
           	qDebug()<<lastError.driverText()<<QString(QObject::tr("更新失败"));
       	}
    }
    qDebug()<<QObject::tr("更新 %1 条记录，耗时：%2 ms").arg(records).arg (t.elapsed());
    //删除
    t.restart();			//重启计时器
    query.exec("delete from automobil where id=15");		//(k)
	//输出操作耗时
    qDebug()<<QObject::tr("删除一条记录，耗时：%1 ms").arg(t.elapsed());
    return 0;
}
